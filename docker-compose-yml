version: '3.8'

services:
  # Servicio de la Base de Datos PostgreSQL
  db:
    image: postgres:13-alpine # Imagen de PostgreSQL
    restart: always
    env_file:
      - .env # Carga las variables de DB desde el .env
    environment: # Variables específicas de la imagen de PostgreSQL
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data # Persistencia de datos de la DB
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}" # Expone el puerto de la DB (5432:5432)
    networks:
      - efrain_network # Conectar a la red personalizada

  # Servicio de la API (Backend - tu carpeta Backefrain)
  api:
    build:
      context: ./Backefrain
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env # Carga las variables de entorno para la API
    environment: # Variables que la API necesita para conectar a la DB
      # El host de la DB es 'db' dentro de la red Docker
      DB_CONNECTION_STRING: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      PORT: 3000 # El puerto interno en el que la API escuchará (ahora es 3000)

      # Pasar las otras variables de entorno de tu backend si las necesitas dentro del contenedor de la API
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}
      EMAILJS_SERVICE_ID: ${EMAILJS_SERVICE_ID}
      EMAILJS_TEMPLATE_ID: ${EMAILJS_TEMPLATE_ID}
      EMAILJS_PRIVATE_KEY: ${EMAILJS_PRIVATE_KEY}
      EMAILJS_PUBLIC_KEY: ${EMAILJS_PUBLIC_KEY}
      JWT_SECRET: ${JWT_SECRET}

    ports:
      - "${API_EXTERNAL_PORT}:3000" # Mapea el puerto externo (4000) al puerto interno de la API (3000)
    networks:
      - efrain_network
    depends_on:
      - db

  # Servicio de la Landing Page (Frontend - tu carpeta frontEfrain)
  landing:
    build:
      context: ./frontEfrain
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${LANDING_EXTERNAL_PORT}:80" # Mapea el puerto externo (3000) al puerto 80 de Nginx (interno)
    networks:
      - efrain_network
    depends_on:
      - api # La landing puede depender de la API, para asegurar el orden de inicio.

# Volúmenes para persistencia de datos
volumes:
  db_data:

# Red personalizada
networks:
  efrain_network:
    driver: bridge