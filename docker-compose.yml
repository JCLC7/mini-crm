version: '3.8'

services:
 
  db:
    image: postgres:13-alpine 
    restart: always
    env_file:
      - .env 
    environment: 
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data 
      - ./Backefrain/db/init.sql:/docker-entrypoint-initdb.d/init.sql 
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}" 
    networks:
      - efrain_network 

  
  api:
    build:
      context: ./Backefrain
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env # Carga las variables de entorno para la API
    environment:
      DB_CONNECTION_STRING: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      PORT: 3000 
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}
      EMAILJS_SERVICE_ID: ${EMAILJS_SERVICE_ID}
      EMAILJS_TEMPLATE_ID: ${EMAILJS_TEMPLATE_ID}
      EMAILJS_PRIVATE_KEY: ${EMAILJS_PRIVATE_KEY}
      EMAILJS_PUBLIC_KEY: ${EMAILJS_PUBLIC_KEY}
      JWT_SECRET: ${JWT_SECRET}

    ports:
      - "${API_EXTERNAL_PORT}:3000" 
    networks:
      - efrain_network
    depends_on:
      - db

  
  landing:
    build:
      context: ./frontEfrain
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${LANDING_EXTERNAL_PORT}:80" 
    networks:
      - efrain_network
    depends_on:
      - api 
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    restart: always
    ports:
      - "80:80"       # HTTP
      - "81:81"       # Panel de administraci√≥n
      - "443:443"     # HTTPS
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    volumes:
      - ./data/nginx/data:/data
      - ./data/nginx/letsencrypt:/etc/letsencrypt
    networks:
      - efrain_network

volumes:
  db_data:


networks:
  efrain_network:
    driver: bridge  

